plugins {
    id 'java'
    id 'maven'
    id 'idea'
}

allprojects {
    group 'de.novacyb.temporal'
    version '0.9.0.0-SNAPSHOT'

    def currentOS = org.gradle.internal.os.OperatingSystem.current()
    def platform
    if (currentOS.isWindows()) {
        platform = 'win'
    } else if (currentOS.isLinux()) {
        platform = 'linux'
    } else if (currentOS.isMacOsX()) {
        platform = 'mac'
    }

    // version configuration
    project.ext {
        openjfx                 = "$System.env.PATH_TO_FX"
        openjfxVersion          = "11:$platform"
        troveVersion            = '3.0.3'
        reactfxVersion          = '2.0-M5'
        jUnitVersion            = '5.3.2'
        jUnitPlatformVersion    = '1.3.2'
    }

    sourceCompatibility = 11
    targetCompatibility = 11

    configurations.all {
        // Check for changing dependency updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'

    idea {
        module {
            downloadJavadoc = true
        }
    }

    test {
        // enable JUnit Platform (a.k.a. JUnit 5) support
        useJUnitPlatform()

        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        // Fail the 'test' task on the first test failure
        failFast = false

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }

        // define reports
        reports {
            junitXml.enabled = true
            html.enabled = true
        }

        beforeTest { descriptor ->
            logger.lifecycle("Running test: $descriptor.className")
        }
    }
}